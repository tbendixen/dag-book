lm(Y ~ X_miss, data = d_miss)
lm(Y ~ X, data = d_miss)
library(ggplot2)
ggplot(d_miss, aes(x = X, y = Y)) +
geom_point(aes(color = is.na(X_miss)), alpha = 0.5) +
geom_smooth(method = "lm", formula = y ~ x, linetype = "solid", color = "black", data = d_miss[!is.na(X_miss), ]) +
geom_smooth(method = "lm", formula = y ~ x, linetype = "solid", color = "grey60", data = d_miss) +
scale_color_manual(values = c("black", "grey"), labels = c("Observed", "Missing")) +
labs(title = "Simulating missingness",
subtitle = "Models with (black) and without (grey) missingness",
x = "X", y = "Y") +
theme_classic() +
theme(legend.position = "none")
library(causaldata)
d <- nhefs
d$sex <- as.factor(d$sex)
census2021 <- read.csv("data/CensusUS2021.csv")
census <- census2021
census$age_group[census$AGE_GROUP == "Under 15 years"] <- 1
census$age_group[census$AGE_GROUP == "15 to 17 years"] <- 2
census$age_group[census$AGE_GROUP == "18 to 20 years"] <- 3
census$age_group[census$AGE_GROUP == "21 to 44 years"] <- 4
census$age_group[census$AGE_GROUP == "45 to 64 years"] <- 5
census$age_group[census$AGE_GROUP == "65 years and over"] <- 6
census$sex <- ifelse(census$SEX == "FEMALE", 1, 0) |> as.factor()
census$proportion <- census$PERCENTAGE/100
write.csv(census, "data/census_ageGroups.csv", row.names = FALSE)
d2 <- d
d2$age_group[d2$age < 15] <- 1 # "Under 15 years"
d2$age_group[d2$age >= 15 & d2$age <= 17] <- 2 # "15 to 17 years"
d2$age_group[d2$age >= 18 & d2$age <= 20] <- 3 # "18 to 20 years"
d2$age_group[d2$age >= 21 & d2$age <= 44] <- 4 # "21 to 44 years"
d2$age_group[d2$age >= 45 & d2$age <= 64] <- 5 # "45 to 64 years"
d2$age_group[d2$age > 64] <- 6 # "65 years and over"
write.csv(d2, "data/nhefs_ageGroups.csv", row.names = FALSE)
library(patchwork)
library(dplyr)
library(ggplot2)
### Calculate demographic proportions in the nhefs data...
d3 <- d2 |>
group_by(age_group, sex) |>
summarise(n = n()) |>
mutate(proportion = n/sum(n)) |>
ungroup()
### ... And fill in missing demographic combinations
d3 <- rbind(data.frame(age_group = c(1,1,2,2,3,3),
sex = rep(c(0,1), 3),
n = 0,
proportion = 0),
d3)
### Make age_group a factor variable
d3$age_group <- factor(d3$age_group, levels = 1:6)
census$age_group <- factor(census$age_group, levels = 1:6)
### Plotting distributions of age groups for each sex in nhefs and census
## Males
p1 <- ggplot() +
geom_line(data = subset(d3, sex == 0),
aes(x = age_group, y = proportion, group = 1), linetype = "dashed", linewidth = 1) +
geom_line(data = subset(census, SEX == "MALE"),
aes(x = age_group, y = PERCENTAGE/100, group = 1), linewidth = 1) +
theme_classic() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.text.x = element_text(angle = -60, vjust = -1)) +
scale_x_discrete(NULL,
labels = c(
"1" = "Under 15 years",
"2" = "15 to 17 years",
"3" = "18 to 20 years",
"4" = "21 to 44 years",
"5" = "45 to 64 years",
"6" = "+65 years")) +
labs(title = "Age distributions",
subtitle = "Males")
## Females
p2 <- ggplot() +
geom_line(data = subset(d3, sex == 1),
aes(x = age_group, y = proportion, group = 1), linetype = "dashed", linewidth = 1) +
geom_line(data = subset(census, SEX == "FEMALE"),
aes(x = age_group, y = PERCENTAGE/100, group = 1), linewidth = 1) +
theme_classic() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.text.x = element_text(angle = -60, vjust = -1)) +
scale_x_discrete(NULL,
labels = c(
"1" = "Under 15 years",
"2" = "15 to 17 years",
"3" = "18 to 20 years",
"4" = "21 to 44 years",
"5" = "45 to 64 years",
"6" = "+65 years")) +
labs(subtitle = "Females")
(p1 + p2)
mod <- lm(wt82_71 ~ qsmk*sex + qsmk*age_group,
data = d2)
census$age_group <- as.numeric(census$age_group)
census$sex <- as.factor(census$sex)
census$EX1 <- predict(mod,
newdata = transform(census,
qsmk = 1))
census$EX0 <- predict(mod,
newdata = transform(census,
qsmk = 0))
census$wEX1 <- census$EX1*census$proportion
census$wEX0 <- census$EX0*census$proportion
with(census, sum(wEX1)-sum(wEX0))
xtable::xtable(census[c("AGE_GROUP", "SEX", "EX1", "EX0","wEX1", "wEX0")],
digits = c(0,0,0,1,1,1,1), include.rownames=FALSE)
bayes_mod <- readRDS("fits/bayes_poststrat.rds")
library(tidybayes)
### Predict outcome when exposure X = 1 for all
psEX1 <- add_epred_draws(object = bayes_mod,
newdata = transform(census, qsmk=1),
# Predict for covariates combinations
# not observed in the training data (nhefs)
allow_new_levels = TRUE) |>
# Posterior means for each covariate combination
group_by(age_group, sex) |>
summarise(psEX1 = mean(.epred))
### Predict outcome when exposure X = 0 for all
psEX0 <- add_epred_draws(object = bayes_mod,
newdata = transform(census, qsmk=0),
allow_new_levels = TRUE) |>
group_by(age_group, sex) |>
summarise(psEX0 = mean(.epred))
### Predict outcome when exposure X = 1 for all
wpsEX1 <- add_epred_draws(object = bayes_mod,
newdata = transform(census, qsmk=1),
allow_new_levels = TRUE) |>
# New bit: Re-weight model predictions using census proportions
mutate(estimate_prop = .epred*proportion) |>
group_by(age_group, sex, .draw) |>
summarise(wpsEX1 = sum(estimate_prop)) |>
# Posterior means for each covariate combination
group_by(age_group, sex) |>
summarise(wpsEX1 = mean(wpsEX1))
### Predict outcome when exposure X = 0 for all
wpsEX0 <- add_epred_draws(object = bayes_mod,
newdata = transform(census, qsmk=0),
allow_new_levels = TRUE) |>
mutate(estimate_prop = .epred*proportion) |>
group_by(age_group, sex, .draw) |>
summarise(wpsEX0 = sum(estimate_prop)) |>
group_by(age_group, sex) |>
summarise(wpsEX0 = mean(wpsEX0))
### No poststratification
ps <- data.frame(age_group = census$AGE_GROUP,
sex = census$SEX,
EX1 = census$EX1,
EX0 = census$EX0,
psEX1 = psEX1$psEX1,
psEX0 = psEX0$psEX0,
E = census$EX1 - census$EX0,
psE = psEX1$psEX1 - psEX0$psEX0)
ps$age_group <- factor(ps$age_group, levels = c(
"1" = "Under 15 years",
"2" = "15 to 17 years",
"3" = "18 to 20 years",
"4" = "21 to 44 years",
"5" = "45 to 64 years",
"6" = "65 years and over"))
### With poststratification
psw <- data.frame(age_group = census$AGE_GROUP,
sex = census$SEX,
wEX1 = census$wEX1,
wEX0 = census$wEX0,
wpsEX1 = wpsEX1$wpsEX1,
wpsEX0 = wpsEX0$wpsEX0)
psw$age_group <- factor(psw$age_group, levels = c(
"1" = "Under 15 years",
"2" = "15 to 17 years",
"3" = "18 to 20 years",
"4" = "21 to 44 years",
"5" = "45 to 64 years",
"6" = "65 years and over"))
p1 <- ggplot() +
geom_line(data = subset(ps, sex == "FEMALE"),
aes(x = age_group, y = EX1, group = 1), linetype = "dashed", size = 1, colour = "grey60") +
geom_line(data = subset(ps, sex == "FEMALE"),
aes(x = age_group, y = psEX1, group = 1), size = 1, colour = "grey60") +
geom_line(data = subset(ps, sex == "FEMALE"),
aes(x = age_group, y = EX0, group = 1), linetype = "dashed", size = 1) +
geom_line(data = subset(ps, sex == "FEMALE"),
aes(x = age_group, y = psEX0, group = 1), size = 1) +
theme_classic() +
ylab("Weight change (kg)") +
theme(
axis.text.x = element_text(angle = -60, vjust = -1)) +
scale_x_discrete(NULL,
labels = c(
"1" = "Under 15 years",
"2" = "15 to 17 years",
"3" = "18 to 20 years",
"4" = "21 to 44 years",
"5" = "45 to 64 years",
"65 years and over" = "+65 years")) +
labs(title = "Predicted weight change",
subtitle = "No poststratification")
p2 <- ggplot() +
geom_line(data = subset(psw, sex == "FEMALE"),
aes(x = age_group, y = wEX1, group = 1), linetype = "dashed", size = 1, colour = "grey60") +
geom_line(data = subset(psw, sex == "FEMALE"),
aes(x = age_group, y = wpsEX1, group = 1), size = 1, colour = "grey60") +
geom_line(data = subset(psw, sex == "FEMALE"),
aes(x = age_group, y = wEX0, group = 1), linetype = "dashed", size = 1) +
geom_line(data = subset(psw, sex == "FEMALE"),
aes(x = age_group, y = wpsEX0, group = 1), size = 1) +
theme_classic() +
ylab(NULL) +
theme(
axis.text.x = element_text(angle = -60, vjust = -1)) +
scale_x_discrete(NULL,
labels = c(
"1" = "Under 15 years",
"2" = "15 to 17 years",
"3" = "18 to 20 years",
"4" = "21 to 44 years",
"5" = "45 to 64 years",
"65 years and over" = "+65 years")) +
labs(subtitle = "With poststratification")
(p1 + p2)
p3 <- ggplot() +
geom_line(data = subset(ps, sex == "MALE"),
aes(x = age_group, y = EX1, group = 1), linetype = "dashed", size = 1, colour = "grey60") +
geom_line(data = subset(ps, sex == "MALE"),
aes(x = age_group, y = psEX1, group = 1), size = 1, colour = "grey60") +
geom_line(data = subset(ps, sex == "MALE"),
aes(x = age_group, y = EX0, group = 1), linetype = "dashed", size = 1) +
geom_line(data = subset(ps, sex == "MALE"),
aes(x = age_group, y = psEX0, group = 1), size = 1) +
theme_classic() +
ylab("Weight change (kg)") +
theme(
axis.text.x = element_text(angle = -60, vjust = -1)) +
scale_x_discrete(NULL,
labels = c(
"1" = "Under 15 years",
"2" = "15 to 17 years",
"3" = "18 to 20 years",
"4" = "21 to 44 years",
"5" = "45 to 64 years",
"65 years and over" = "+65 years")) +
labs(title = "Predicted weight change",
subtitle = "No poststratification (males)")
p4 <- ggplot() +
geom_line(data = subset(psw, sex == "MALE"),
aes(x = age_group, y = wEX1, group = 1), linetype = "dashed", size = 1, colour = "grey60") +
geom_line(data = subset(psw, sex == "MALE"),
aes(x = age_group, y = wpsEX1, group = 1), size = 1, colour = "grey60") +
geom_line(data = subset(psw, sex == "MALE"),
aes(x = age_group, y = wEX0, group = 1), linetype = "dashed", size = 1) +
geom_line(data = subset(psw, sex == "MALE"),
aes(x = age_group, y = wpsEX0, group = 1), size = 1) +
theme_classic() +
ylab(NULL) +
theme(
axis.text.x = element_text(angle = -60, vjust = -1)) +
scale_x_discrete(NULL,
labels = c(
"1" = "Under 15 years",
"2" = "15 to 17 years",
"3" = "18 to 20 years",
"4" = "21 to 44 years",
"5" = "45 to 64 years",
"65 years and over" = "+65 years")) +
labs(subtitle = "With poststratification (males)")
(p3 + p4)
### Predict outcome when exposure X = 1 for all
ateEX1 <- add_epred_draws(object = bayes_mod,
newdata = transform(census, qsmk=1),
allow_new_levels = TRUE) |>
mutate(estimate_prop = .epred*proportion) |>
# New bit: Marginalize over covariate combinations by grouping on .draw
group_by(.draw) |>
summarise(.epred = sum(estimate_prop))
### Predict outcome when exposure X = 1 for all
ateEX0 <- add_epred_draws(object = bayes_mod,
newdata = transform(census, qsmk=0),
allow_new_levels = TRUE) |>
mutate(estimate_prop = .epred*proportion) |>
group_by(.draw) |>
summarise(.epred = sum(estimate_prop))
### Compute poststratified ATE
poststratified_ate <- data.frame(X1 = ateEX1$.epred,
X0 = ateEX0$.epred,
draw = ateEX0$.draw) |>
# For each posterior draw...
group_by(draw) |>
# ... Calculate ATE
summarise(ate = mean(X1 - X0))
mean_hdi(poststratified_ate$ate)
ggplot(poststratified_ate, aes(x = ate)) +
geom_density() +
theme_classic()
library(haven) # for loading .dta file
library(dplyr)
### Load original data
dta <- read_dta("data/ACT_IllLvlMainWithMalProbs_FINAL_pub.dta") |> as.data.frame()
### Filter data set, as the original study did -- re-use name from original analysis script
all_ill_prob <- subset(dta, first_ep==1 & ex_post==0 & rdt_any==0)
### Collaps all ACT subsidy types
all_ill_prob$act_any <- ifelse(all_ill_prob$act40==1 |
all_ill_prob$act60==1 |
all_ill_prob$act100==1,
1, 0) |> as.integer()
### Replace sample-mean imputed values with NAs to allow Bayesian imputation, and then standardize
all_ill_prob$B_head_age_bimps <- with(all_ill_prob,
ifelse(B_head_age_missing==1, NA, B_head_age_imputed))
### Prepare data for IV and multilevel analysis
cohen2015 <- all_ill_prob |>
select(householdid, took_act, act_any, B_head_age_bimps, head_lit, used_act_v, totstrata)
### Change col names
colnames(cohen2015) <- c("hid", "act", "subsidy", "age", "literate", "voucher", "stratum")
### Declare variable types
cohen2015$hid <- as.factor(cohen2015$hid)
cohen2015$act <- as.integer(cohen2015$act)
cohen2015$subsidy <- as.integer(cohen2015$subsidy)
cohen2015$age <- as.numeric(cohen2015$age)
cohen2015$literate <- as.integer(cohen2015$literate)
cohen2015$voucher <- as.integer(cohen2015$voucher)
cohen2015$stratum <- as.factor(cohen2015$stratum)
### Subset data for missing data analysis
cohen2015miss <- cohen2015 |>
select(act, subsidy, age, literate)
### Export
write.csv(cohen2015, "data/cohen2015.csv", row.names = FALSE)
write.csv(cohen2015miss, "data/cohen2015miss.csv", row.names = FALSE)
d <- read.csv("data/cohen2015.csv")
### Fit outcome and treatment models
y_mod <- glm(act ~ subsidy,
data = d,
family = "binomial")
x_mod <- glm(voucher ~ subsidy,
data = d,
family = "binomial")
### Intention-to-treat analysis
YV1 <- predict(y_mod,
newdata = transform(d, subsidy = 1),
type = "response")
YV0 <- predict(y_mod,
newdata = transform(d, subsidy = 0),
type = "response")
itt <- mean(YV1) - mean(YV0)
### "Compliance analysis"
XV1 <- predict(x_mod,
newdata = transform(d, subsidy = 1),
type = "response")
XV0 <- predict(x_mod,
newdata = transform(d, subsidy = 0),
type = "response")
compliance <- mean(XV1) - mean(XV0)
### Wald IV ratio estimator / Treatment-on-the-treated estimate
(iv <- itt/compliance)
library(brms)
# Treatment-instrument model formula
xv_formula <- bf(voucher ~ subsidy)
# Outcome-treatment model formula
yx_formula <- bf(act ~ voucher)
# Fit models and set residual correlation = TRUE
bayes_iv_mod <- brm(xv_formula + yx_formula + set_rescor(TRUE),
data = d, cores = 4, seed = 42,
file = "fits/bayes_iv")
summary(bayes_iv_mod)
### Bayesian marginal IV
bayes_YX1 <- add_epred_draws(object = bayes_iv_mod,
newdata = transform(d, voucher = 1),
resp = "act")$.epred
bayes_YX0 <- add_epred_draws(object = bayes_iv_mod,
newdata = transform(d, voucher = 0),
resp = "act")$.epred
bayes_marginal_iv <- bayes_YX1 - bayes_YX0
mean(bayes_marginal_iv)
quantile(bayes_marginal_iv, probs = c(0.025, 0.975))
mean_hdi(bayes_marginal_iv)
bayes_marginal_iv
bayes_YX0 <- add_epred_draws(object = bayes_iv_mod,
newdata = data.frame(voucher = 0),
resp = "act")$.epred
bayes_YX0
bayes_YX1 <- add_epred_draws(object = bayes_iv_mod,
newdata = data.frame(voucher = 1),
resp = "act")$.epred
bayes_YX0 <- add_epred_draws(object = bayes_iv_mod,
newdata = data.frame(voucher = 0),
resp = "act")$.epred
bayes_marginal_iv <- bayes_YX1 - bayes_YX0
mean_hdi(bayes_marginal_iv)
knitr::opts_chunk$set(echo = TRUE,
results='hide',
cache=FALSE,
warning = FALSE,
message = FALSE,
error = TRUE,
cache.comments = FALSE,
cache.lazy = FALSE)
# Provided simulation code
set.seed(1747)
n <- 1e4
U <- rnorm(n, 0, 1)
Z_0 <- rbinom(n, 1, plogis(0.5))
X_0 <- rbinom(n, 1, plogis(0.5 + Z_0 * 0.5))
Z_1 <- rbinom(n, 1, plogis(0.5 + X_0 * 0.5 + U * 0.5))
X_1 <- rbinom(n, 1, plogis(0.5 + Z_1 * 0.5))
Y <- rnorm(n, 10 + U * 2)
dat <- data.frame(Y = Y, X_0 = X_0, X_1 = X_1, Z_0 = Z_0, Z_1 = Z_1, U = U)
head(dat)
# G-estimation function for time-varying treatment (X_0, X_1) and confounders (Z_0, Z_1)
g_estimation <- function(beta_0, beta_1, data) {
# Step 1: Adjust treatment at time 1 (X_1) by subtracting beta_1
data$X_1_star <- data$X_1 - beta_1
# Fit a model for Y controlling for X_1_star, X_0, Z_1, and Z_0
model1 <- lm(Y ~ X_1_star + X_0 + Z_1 + Z_0, data = data)
coef_X1_star <- coef(model1)["X_1_star"]
# Step 2: Adjust treatment at time 0 (X_0) by subtracting beta_0
data$X_0_star <- data$X_0 - beta_0
# Fit a model for Y controlling for X_0_star and Z_0
model0 <- lm(Y ~ X_0_star + Z_0, data = data)
coef_X0_star <- coef(model0)["X_0_star"]
# Return the coefficients for X_0_star and X_1_star
return(c(coef_X0_star, coef_X1_star))
}
# Wrapper function to optimize both beta_0 and beta_1
g_estimation_wrapper <- function(par, data) {
beta_0 <- par[1]
beta_1 <- par[2]
# Run g-estimation and get residual coefficients for X_0_star and X_1_star
coefs <- g_estimation(beta_0, beta_1, data)
# We want the coefficients to be as close to zero as possible
return(coefs)
}
# Optimization function to minimize the residual associations with the treatment
result <- optim(par = c(0, 0), fn = function(par) sum(g_estimation_wrapper(par, dat)^2))
beta_0_hat <- result$par[1]
beta_1_hat <- result$par[2]
cat("Estimated beta_0 (treatment effect at time 0):", beta_0_hat, "\n")
cat("Estimated beta_1 (treatment effect at time 1):", beta_1_hat, "\n")
# Set seed for reproducibility
set.seed(42)
n <- 1e4
a <- 100
bXM <- 1
bXY <- 1
bMY <- 2
X <- rbinom(n, 1, 0.5)
M <- rnorm(n, bXM*X) + rnorm(n)
Y <- rnorm(n, a + bXY*X + bMY*M) + rnorm(n)
d <- data.frame(X = X, M = M, Y = Y)
# Naïve model
model_naive <- lm(Y ~ X, data = d)
summary(model_naive)
confint(model_naive)
# Step 1: Model X on M
model_XM <- lm(M ~ X, data = d)
summary(model_XM)
# Step 2: Model M on Y (accounting for X)
model_MY <- lm(Y ~ M, data = d)
summary(model_MY)
# G-Computation
# Predict M for X = 0 and X = 1
M_0 <- predict(model_XM, newdata = data.frame(X = 0))
M_1 <- predict(model_XM, newdata = data.frame(X = 1))
# Predict Y for M_0 and M_1, keeping X fixed at 0 and 1 respectively
Y_0 <- predict(model_MY, newdata = data.frame(X = 0, M = M_0))
Y_1 <- predict(model_MY, newdata = data.frame(X = 1, M = M_1))
# Calculate the average causal effect
ACE <- mean(Y_1) - mean(Y_0)
ACE
m_mod <- lm(M ~ X, data = d)
y_mod <- lm(Y ~ X + M, data = d)
mX1 <- predict(m_mod, newdata = transform(d, X = 1))
mX0 <- predict(m_mod, newdata = transform(d, X = 0))
### CDE
m <- mean(d$M)
yX0Mm <- predict(y_mod, newdata = transform(d, X = 0, M = m))
yX1Mm <- predict(y_mod, newdata = transform(d, X = 1, M = m))
CDE <- mean(yX1Mm) - mean(yX0Mm)
### TIE
yX1M0 <- predict(y_mod, newdata = transform(d, X = 1, M = mX0))
yX1M1 <- predict(y_mod, newdata = transform(d, X = 1, M = mX1))
TIE <- mean(yX1M1) - mean(yX1M0)
### PIE
YX0M0 <- predict(y_mod, newdata = transform(d, X = 0, M = mX0))
YX0M1 <- predict(y_mod, newdata = transform(d, X = 0, M = mX1) )
PIE <- mean(YX0M1) - mean(YX0M0)
### TDE
mX1 <- predict(m_mod, newdata = transform(d, X = 1))
yX0MX1 <- predict(y_mod, newdata = transform(d, X = 0, M = mX1))
yX1MX1 <- predict(y_mod, newdata = transform(d, X = 1, M = mX1))
TDE <- mean(yX1MX1) - mean(yX0MX1)
### PDE
mX0 <- predict(m_mod, newdata = transform(d, X = 0) )
yX0MX0 <- predict(y_mod, newdata = transform(d, X = 0, M = mX0))
yX1MX0 <- predict(y_mod, newdata = transform(d, X = 1, M = mX0))
PDE <- mean(yX1MX0) - mean(yX0MX0)
### TIE
yX1M0 <- predict(y_mod, newdata = transform(d, X = 1, M = mX0))
yX1M1 <- predict(y_mod, newdata = transform(d, X = 1, M = mX1) )
TIE <- mean(yX1M1) - mean(yX1M0)
### PIE
yX0M0 <- predict(y_mod, newdata = transform(d, X = 0, M = mX0))
yX0M1 <- predict(y_mod, newdata = transform(d, X = 0, M = mX1) )
PIE <- mean(yX0M1) - mean(yX0M0)
### TE
TE <- mean(yX1MX1) - mean(yX0MX0)
TE
