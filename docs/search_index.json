[["advest.html", "Chapter 7 Advanced Estimation 7.1 Multilevel malaria medicine 7.2 Simulating Mundlak 7.3 Education and prosociality: Mundlak in action 7.4 Marginal effects in a multilevel model", " Chapter 7 Advanced Estimation library(brms) library(ggplot2) library(patchwork) library(dplyr) library(tidybayes) 7.1 Multilevel malaria medicine To reproduce the figure comparing random and fixed effects, we first load the malaria subsidy data and fit the five models. We again use the brms package with default prior settings, but models could just as well be implemented using e.g., lme4. d &lt;- read.csv(&quot;data/cohen2015.csv&quot;) d$stratum &lt;- as.factor(d$stratum) 7.1.1 Naïve model: Simple intercept and slope msimp &lt;- brm(act ~ 1 + subsidy, data = d, cores = 4, seed = 1, file = &quot;fits/msimp&quot;) 7.1.2 Fixed effects mfix &lt;- brm(act ~ 1 + subsidy + stratum, data = d, cores = 4, seed = 1, file = &quot;fits/mfix.rds&quot;) 7.1.3 Fixed effects interacting treatment and group mfix2 &lt;- brm(act ~ 1 + subsidy * stratum, data = d, cores = 4, seed = 1, file = &quot;fits/mfix2.rds&quot;) 7.1.4 Random intercepts mran &lt;- brm(act ~ 1 + subsidy + (1 | stratum), data = d, cores = 4, seed = 1, file = &quot;fits/mran.rds&quot;) 7.1.5 Random intercepts and slopes mran2 &lt;- brm(act ~ 1 + subsidy + (1 + subsidy | stratum), data = d, cores = 4, seed = 1, file = &quot;fits/mran2.rds&quot;) 7.1.6 Plot models in a panel First, we extract and collect model coefficients in a data frame. FEREpanel &lt;- data.frame(intercept = c(fixef(msimp)[1], fixef(mran)[1], coef(mran)$stratum[,1,1], fixef(mran2)[1], coef(mran2)$stratum[,1,1], fixef(mfix)[1], fixef(mfix)[3:29] + fixef(mfix)[1], fixef(mfix2)[1], fixef(mfix2)[3:29] + fixef(mfix2)[1]), slope = c(fixef(msimp)[1], fixef(mran)[2], coef(mran)$stratum[,1,2], fixef(mran2)[2], coef(mran2)$stratum[,1,2], rep(fixef(mfix)[2],28), fixef(mfix2)[2], fixef(mfix2)[30:56] + fixef(mfix2)[2]), g = c(1, rep(1:29, 2), rep(1:28, 2)), grand = c(1, 1, rep(0,28), 1, rep(0,28), rep(0, 56)), model = c(&quot;Y ~ 1 + X&quot;, rep(&quot;Y ~ 1 + X + (1 | G)&quot;, 29), rep(&quot;Y ~ 1 + X + (1 + X | G)&quot;, 29), rep(&quot;Y ~ 1 + X + G&quot;, 28), rep(&quot;Y ~ 1 + X * G&quot;, 28))) Next, we generate predictions from each of the models. # Define a range of x-values (here, it&#39;s simply control (X = 0) vs. treatment (X = 1) x_values &lt;- seq(0, 1, by = 1) # Expand the dataframe to include x-values for each line... FEREpanel &lt;- FEREpanel |&gt; tidyr::expand_grid(x = x_values) |&gt; # ... and compute predictions for control vs. treatment dplyr::mutate(y = intercept + slope * x) Then we plot predictions from each of the models # Set y-axis limit ylim &lt;- c(0,1) # Generate individual plots p1 &lt;- FEREpanel |&gt; filter(model == &quot;Y ~ 1 + X&quot;) |&gt; ggplot(aes(x = x, y = y)) + geom_line() + theme_classic() + labs(subtitle = &quot;Simple intercept and slope&quot;, title = &quot;Y ~ 1 + X&quot;, y = NULL, x = NULL) + scale_x_continuous(breaks = c(0,1), labels = c(&quot;Control&quot;, &quot;Treatment&quot;), expand = c(0.1, 0.1)) + coord_cartesian(ylim = ylim) p2 &lt;- FEREpanel |&gt; filter(model == &quot;Y ~ 1 + X + G&quot;) |&gt; ggplot(aes(x = x, y = y, group = g)) + geom_line(alpha = 0.15) + theme_classic() + theme(legend.position = &quot;none&quot;) + labs(subtitle = &quot;Fixed effects&quot;, title = &quot;Y ~ 1 + X + G&quot;, y = &quot;Prob. of taking ACT&quot;, x = NULL) + scale_x_continuous(breaks = c(0,1), labels = c(&quot;Control&quot;, &quot;Treatment&quot;), expand = c(0.1, 0.1)) + coord_cartesian(ylim = ylim) p3 &lt;- FEREpanel |&gt; filter(model == &quot;Y ~ 1 + X * G&quot;) |&gt; ggplot(aes(x = x, y = y, group = g)) + geom_line(alpha = 0.15) + theme_classic() + theme(legend.position = &quot;none&quot;, axis.ticks.y = element_blank(), axis.text.y = element_blank()) + labs(subtitle = &quot;FE interacting X and group&quot;, title = &quot;Y ~ 1 + X * G&quot;, y = NULL, x = NULL) + scale_x_continuous(breaks = c(0,1), labels = c(&quot;Control&quot;, &quot;Treatment&quot;), expand = c(0.1, 0.1)) + coord_cartesian(ylim = ylim) p4 &lt;- FEREpanel |&gt; filter(model == &quot;Y ~ 1 + X + (1 | G)&quot;) |&gt; ggplot(aes(x = x, y = y, group = g, alpha = factor(grand))) + geom_line() + scale_alpha_manual(values = c(0.15, 1)) + theme_classic() + theme(legend.position = &quot;none&quot;) + labs(subtitle = &quot;Random intercepts&quot;, title = &quot;Y ~ 1 + X + (1 | G)&quot;, y = NULL, x = NULL) + scale_x_continuous(breaks = c(0,1), labels = c(&quot;Control&quot;, &quot;Treatment&quot;), expand = c(0.1, 0.1)) + coord_cartesian(ylim = ylim) p5 &lt;- FEREpanel |&gt; filter(model == &quot;Y ~ 1 + X + (1 + X | G)&quot;) |&gt; ggplot(aes(x = x, y = y, group = g, alpha = factor(grand))) + geom_line() + scale_alpha_manual(values = c(0.15, 1)) + theme_classic() + theme(legend.position = &quot;none&quot;, axis.ticks.y = element_blank(), axis.text.y = element_blank()) + labs(subtitle = &quot;Random intercepts and slopes&quot;, title = &quot;Y ~ 1 + X + (1 + X | G)&quot;, y = NULL, x = NULL) + scale_x_continuous(breaks = c(0,1), labels = c(&quot;Control&quot;, &quot;Treatment&quot;), expand = c(0.1, 0.1)) + coord_cartesian(ylim = ylim) Finally, we panel the individual plots using the patchwork package layout &lt;- &quot; A# BC DE &quot; (p1 + p2 + p3 + p4 + p5 + plot_layout(design = layout)) 7.1.7 Regularized vs. empirical estimates In the text, we show an alternative way to demonstrate partial pooling in a multilevel model. This is where we compare the regularized predictions from a multilevel model against the “empirical” estimates from a fixed effects model. We re-use the model objects from above, mfix2 and mran2, where the treatment effect is allowed to vary by strata. First, we create two data frames that include the estimated treatment effect for each randomization stratum for each of the two models. # Fixed effects treatment effects coeffix &lt;- data.frame( strata = 1:28, coef = fixef(mfix2)[c(2, 30:56), 1]) coeffix$coef[2:28] &lt;- coeffix$coef[2:28] + coeffix$coef[1] # Random effects treatment effects coefran &lt;- data.frame( strata = 1:28, coef = coef(mran2)$stratum[,&quot;Estimate&quot;, &quot;subsidy&quot;]) # Compute strata sample sizes N &lt;- d |&gt; group_by(stratum) |&gt; summarise(N = n()) # Input strata sample sizes in data frames coeffix$N &lt;- N$N coefran$N &lt;- N$N # Arrange data frames according to strata sample sizes coeffix &lt;- coeffix |&gt; arrange(N) coeffix$strata &lt;- factor(coeffix$strata, levels = coeffix$strata) coefran &lt;- coefran |&gt; arrange(N) coefran$strata &lt;- factor(coefran$strata, levels = coefran$strata) Then, we plot the stratum-specific treatment effects. ggplot() + geom_line(data = rbind(coeffix, coefran), aes(x = strata, y = coef, group = strata), linewidth = 0.25, alpha = 0.5) + geom_point(data = coeffix, aes(x = strata, y = coef), size = 1.5, alpha = 0.8, shape = 1) + geom_point(data = coefran, aes(x = strata, y = coef), size = 1.5, color = &quot;black&quot;) + geom_hline(yintercept = 0.19, linetype = &quot;dashed&quot;, alpha = 0.2, linewidth = 0.5) + geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = 0.07, ymax = 0.3), fill = &quot;lightgrey&quot;, alpha = 0.2) + ylab(&quot;Treatment Effect&quot;) + xlab(&quot;Randomization Strata\\n(smallest to largest)&quot;) + theme_classic() + theme(axis.text.x = element_blank(), axis.ticks = element_blank()) Instead of using a fixed effects model, an alternative way to compute the “empirical” estimates would be to, within each stratum, take the mean of the outcome variable act for the control (subsidy = 0) and treatment (subsidy = 1) groups separately and then subtract those values. d |&gt; # within each stratum and for each subsidy condition (control vs. treatment)... group_by(stratum, subsidy) |&gt; # ... take the mean of the outcome variable summarise(&quot;T&quot; = mean(act, na.rm = T)) |&gt; # wrangle and name columns tidyr::pivot_wider(names_from = &quot;subsidy&quot;, values_from = &quot;T&quot;, names_prefix = &quot;T&quot;) |&gt; ungroup() |&gt; mutate(coef = T1 - T0) 7.2 Simulating Mundlak Here we show the simulation and plotting code for the synthetic Mundlak demonstration. First, we simulate the confounded data and store it in d_sim set.seed(2025) # define sample size and effects N_groups &lt;- 30 N_id &lt;- 500 a &lt;- 0 bZY &lt;- 1 bXY &lt;- 0.5 g &lt;- sample(1:N_groups, size = N_id, replace = TRUE) # sample into groups Ug &lt;- rnorm(N_groups, 1.5, 1) # group confounds X &lt;- rnorm(N_id, Ug[g], 1) # individual varying trait Z &lt;- rnorm(N_groups, 0, 1) # group varying trait (observed) Y &lt;- rnorm(N_id, a + bXY*X + Ug[g] + bZY*Z[g] ) # collect in data frame d_sim &lt;- data.frame( Y = Y, X = X, Z = Z[g], G = as.factor(g) ) To properly quantify uncertainty and obtain neat posterior distributions of the effects from each model, we again analyze the data in a Bayesian framework using brms with default priors. We fit our four models. 7.2.1 Naïve model (ignoring group) mNA &lt;- brm(Y ~ X + Z, cores = 4, data = d_sim, seed = 1, file = &quot;fits/mNA.rds&quot;) 7.2.2 Fixed effects mFE &lt;- brm(Y ~ X + G, cores = 4, data = d_sim, seed = 1, file = &quot;fits/mFE.rds&quot;) 7.2.3 Random intercepts mRE &lt;- brm(Y ~ X + Z + (1 | G), cores = 4, data = d_sim, seed = 1, file = &quot;fits/mRE.rds&quot;) 7.2.4 Mundlak model d_sim$Xbar &lt;- with(d_sim, ave(X, G, FUN = mean)) mMU &lt;- brm(Y ~ X + Xbar + Z + (1 | G), cores = 4, data = d_sim, seed = 1, file = &quot;fits/mMU.rds&quot;) 7.2.5 Plot effect estimate distributions First, we extract posterior distributions of the coefficient of interest (X) from each model and collect in a data frame. ndraws &lt;- nrow(brms::as_draws_df(mNA, variable = &quot;b_X&quot;)) forest &lt;- data.frame(bX = c(brms::as_draws_df(mNA, variable = &quot;b_X&quot;)$b_X, brms::as_draws_df(mFE, variable = &quot;b_X&quot;)$b_X, brms::as_draws_df(mRE, variable = &quot;b_X&quot;)$b_X, brms::as_draws_df(mMU, variable = &quot;b_X&quot;)$b_X), model = c(rep(&quot;Naïve model\\nY ~ X + Z&quot;, ndraws), rep(&quot;Fixed effects\\nY ~ X + Z + G&quot;, ndraws), rep(&quot;Random effects\\nY ~ X + Z + (1 | G)&quot;, ndraws), rep(&quot;Mundlak model\\nY ~ X + Xbar + Z + (1 | G)&quot;, ndraws))) Next, the models are arranged… forest$model &lt;- factor(forest$model, levels=c(&quot;Naïve model\\nY ~ X + Z&quot;, &quot;Fixed effects\\nY ~ X + Z + G&quot;, &quot;Random effects\\nY ~ X + Z + (1 | G)&quot;, &quot;Mundlak model\\nY ~ X + Xbar + Z + (1 | G)&quot;)) |&gt; forcats::fct_rev() … and then plotted. forest |&gt; ggplot(aes(y = model, x = bX)) + stat_halfeye(slab_fill = &quot;white&quot;, slab_color = &quot;grey40&quot;, color = &quot;white&quot;) + geom_vline(xintercept = 0.5, linetype = &quot;dashed&quot;, alpha = 0.5) + labs(y = NULL, x = &quot;Regression coefficient&quot;) + scale_x_continuous(breaks = c(0.25, 0.5, 0.75, 1)) + theme_classic() 7.3 Education and prosociality: Mundlak in action We finally show the Mundlak model in action in real-world data. We load the cerc data and plot the raw data distribution for the key predictor and outcome variable, respectively, before fitting and plotting our four models. cerc &lt;- read.csv(&quot;data/cerc.csv&quot;) 7.3.1 Raw data distributions cerc |&gt; ggplot(aes(x = FORMALED)) + geom_density(aes(y = after_stat(scaled))) + facet_wrap(~ SITE, nrow = 2) + labs(y = NULL, x = NULL) + scale_x_continuous(n.breaks = 3) + scale_y_continuous(breaks = NULL) + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) + theme_classic() + ggtitle(&quot;Years of formal education&quot;) cerc |&gt; ggplot(aes(x = Y)) + geom_density(aes(y = after_stat(scaled))) + facet_wrap(~ SITE, nrow = 2) + labs(y = NULL, x = NULL) + scale_x_continuous(n.breaks = 3) + scale_y_continuous(breaks = NULL) + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) + theme_classic() + ggtitle(&quot;Coins to co-player&quot;) 7.3.2 Naïve model mNAcerc &lt;- brm(Y ~ 1 + FORMALED, data = cerc, cores = 4, seed = 1, file = &quot;fits/mNAcerc.rds&quot;) 7.3.3 Fixed effects mFEcerc &lt;- brm(Y ~ 1 + FORMALED+ SITE, data = cerc, cores = 4, seed = 1, file = &quot;fits/mFEcerc.rds&quot;) 7.3.4 Random effects mREcerc &lt;- brm(Y ~ 1 + FORMALED + (1 | SITE), data = cerc, cores = 4, seed = 1, file = &quot;fits/mREcerc.rds&quot;) 7.3.5 Mundlak model cerc$Xbar &lt;- with(cerc, ave(FORMALED, SITE, FUN = mean)) mMUcerc &lt;- brm(Y ~ 1 + FORMALED + Xbar + (1 | SITE), data = cerc, cores = 4, seed = 1, file = &quot;fits/mMUcerc.rds&quot;) 7.3.6 Plotting effect of education on religiosity The code for this plot is much the same as for the simulated Mundlak example above. ndraws &lt;- nrow(brms::as_draws_df(mNAcerc, variable = &quot;b_FORMALED&quot;)) forestcerc &lt;- data.frame(bX = c(brms::as_draws_df(mNAcerc, variable = &quot;b_FORMALED&quot;)$b_FORMALED, brms::as_draws_df(mFEcerc, variable = &quot;b_FORMALED&quot;)$b_FORMALED, brms::as_draws_df(mREcerc, variable = &quot;b_FORMALED&quot;)$b_FORMALED, brms::as_draws_df(mMUcerc, variable = &quot;b_FORMALED&quot;)$b_FORMALED), model = c(rep(&quot;Naïve model&quot;, ndraws), rep(&quot;Fixed effects&quot;, ndraws), rep(&quot;Random effects&quot;, ndraws), rep(&quot;Mundlak model&quot;, ndraws))) forestcerc$model &lt;- factor(forestcerc$model, levels=c(&quot;Naïve model&quot;, &quot;Fixed effects&quot;, &quot;Random effects&quot;, &quot;Mundlak model&quot;)) |&gt; forcats::fct_rev() forestcerc |&gt; ggplot(aes(y = model, x = bX)) + stat_halfeye(point_interval = &quot;mean_hdci&quot;, .width = 0.95, slab_fill = &quot;white&quot;, slab_color = &quot;grey40&quot;, color = &quot;white&quot;) + geom_vline(xintercept = 0, linetype = &quot;dashed&quot;, alpha = 0.5) + labs(title = &quot;Cross-cultural Dictator Game&quot;, y = NULL, x = &quot;Effect of Education on Prosociality&quot;) + theme_classic() 7.4 Marginal effects in a multilevel model As we discuss in the text, there are several ways of obtaining predictions from a multilevel model. First, we fit an extended Mundlak model, that allows the effect of education on religiosity to vary by site. mMUcerc2 &lt;- brm(Y ~ 1 + FORMALED + Xbar + (1 + FORMALED | SITE), data = cerc, cores = 4, seed = 1, file = &quot;fits/mMUcerc2.rds&quot;) We can then visualize effect estimates for each group (field site, in this case) across the full range of observed education years and at site-specific average years of education. # prepare prediction grid across full range of education years... nd &lt;- tidyr::expand_grid(FORMALED = c(0,10,20,30), SITE = unique(cerc$SITE)) # ... and at site-specific average years of education nd$Xbar &lt;- rep(unique(cerc$Xbar), length(unique(nd$FORMALED))) Plot predictions for each site in separate panels. For this, we need to include the random effects in the predictions. # Predict effect estimates... add_epred_draws(mMUcerc2, # for prediction grid and... newdata = nd, # ... *include* all random effect components. re_formula = NULL) |&gt; # Compute average effect *within* each MCMC draw. group_by(.draw, SITE, FORMALED) |&gt; summarise(.epred = mean(.epred)) |&gt; # Summarise average effect *across* each MCMC draw # for each site and educational level. group_by(SITE, FORMALED) |&gt; summarise(mean_qi(.epred)) |&gt; # Plot! ggplot(aes(x = FORMALED, y = y, ymin = ymin, ymax = ymax)) + geom_lineribbon(color = &quot;blue&quot;, fill = &quot;grey90&quot;, linewidth = 0.5) + coord_cartesian(ylim = c(0,8)) + facet_wrap(~SITE, nrow = 2) + theme_classic() + theme(legend.position = &quot;none&quot;) + labs(title = &quot;Predicting the observed sites&quot;, subtitle = &quot;Including random effects&quot;, x = &quot;Years of education&quot;, y = &quot;Coins to co-player&quot;) But we can also ignore site-specific effects altogether and instead aim at predicting a perfectly average site. This amounts to ignoring the random effects of the model. We first need to set up a new prediction grid for the new hypothetical site – let’s call it “Newland” – with an average of 7 years of education, the average of the site averages (this can be checked by running mean(unique(cerc$Xbar))). nd2 &lt;- tidyr::expand_grid(FORMALED = c(0,10,20,30), SITE = &quot;Newland&quot;, # could also just set to NA Xbar = 7) # could also make a distribution of Xbars to average over # Predict effect estimates... p1 &lt;- add_epred_draws(mMUcerc2, # for new prediction grid and... newdata = nd2, # ... *ignore* all random effect components. re_formula = NA) |&gt; # Compute average effect *within* each MCMC draw. group_by(.draw, FORMALED) |&gt; summarise(.epred = mean(.epred)) |&gt; # Summarise average effect *across* MCMC draws # for each educational level. group_by(FORMALED) |&gt; summarise(mean_qi(.epred)) |&gt; # Plot! ggplot(aes(x = FORMALED, y = y, ymin = ymin, ymax = ymax)) + geom_lineribbon(color = &quot;blue&quot;, fill = &quot;grey90&quot;, linewidth = 0.5) + coord_cartesian(ylim = c(0,8)) + scale_fill_brewer() + theme_classic() + theme(legend.position = &quot;none&quot;) + labs(title = &quot;Predicting the average site&quot;, subtitle = &quot;Ignoring random effects&quot;, x = &quot;Years of education&quot;, y = &quot;Coins to co-player&quot;) And finally, we could be interested in predicting a new site drawing from all that we know about the observed sites. This amounts to averaging over – instead of ignoring, as above – the uncertainty that we have around the observed sites and generating predictions from that. # Predict effect estimates... p2 &lt;- add_epred_draws(mMUcerc2, # for prediction grid and... newdata = nd2, # ... *include* all random effect components. re_formula = NULL, # Allow predictions for an unobserved group and... allow_new_levels = TRUE, # ... sample from the implied multivariate gaussian. sample_new_levels = &quot;gaussian&quot;) |&gt; # Compute average effect *within* each MCMC draw. group_by(.draw, FORMALED) |&gt; summarise(.epred = mean(.epred)) |&gt; # Summarise average causal effect across MCMC draws # for each educational level. group_by(FORMALED) |&gt; summarise(mean_qi(.epred)) |&gt; # Plot! ggplot(aes(x = FORMALED, y = y, ymin = ymin, ymax = ymax)) + geom_lineribbon(color = &quot;blue&quot;, fill = &quot;grey90&quot;, linewidth = 0.5) + coord_cartesian(ylim = c(0,8)) + scale_fill_brewer() + theme_classic() + theme(legend.position = &quot;none&quot;) + labs(title = &quot;Predicting a new site&quot;, subtitle = &quot;Averaging over random effects&quot;, x = &quot;Years of education&quot;, y = NULL) + scale_y_continuous(breaks = NULL) p1 + p2 + plot_layout(axis_titles = &quot;collect&quot;) 7.4.1 Frequentist workflow For completeness, we can also plot predictions for each site with a frequentist approach. First, we fit a corresponding frequentist model. library(lme4) mMUcerc2_freq &lt;- lmer(Y ~ 1 + FORMALED + Xbar + (1 + FORMALED | SITE), data = cerc) Next, we obtain predictions using the marginaleffects package to obtain confidence intervals. Now, the frequentist approach excludes uncertainty in the random effects, so it’s not entirely comparable to the predictions obtained in the text. library(marginaleffects) # Predicting the observed sites (only with uncertainty in the global/fixed effects parameters) predictions(mMUcerc2_freq, newdata = nd) |&gt; ggplot(aes(x = FORMALED, y = estimate, ymin = conf.low, ymax = conf.high)) + geom_lineribbon(color = &quot;blue&quot;, fill = &quot;grey90&quot;, linewidth = 0.5) + coord_cartesian(ylim = c(0,8)) + facet_wrap(~SITE, nrow = 2) + theme_classic() + theme(legend.position = &quot;none&quot;) + labs(title = &quot;Predicting the observed sites&quot;, subtitle = &quot;Frequentist version&quot;, x = &quot;Years of education&quot;, y = &quot;Coins to co-player&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
